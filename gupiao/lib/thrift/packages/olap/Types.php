<?php
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


final class KylinCubeStatus {
  const DISABLED = 0;
  const BUILDING = 1;
  const READY = 2;
  const DESCBROKEN = 3;
  static public $__names = array(
    0 => 'DISABLED',
    1 => 'BUILDING',
    2 => 'READY',
    3 => 'DESCBROKEN',
  );
}

final class KylinCubeBuildType {
  const BUILD = 0;
  const MERGE = 1;
  const REFRESH = 2;
  static public $__names = array(
    0 => 'BUILD',
    1 => 'MERGE',
    2 => 'REFRESH',
  );
}

final class KylinCubeSegmentStatus {
  const _NEW = 0;
  const READY = 1;
  const READY_PENDING = 2;
  static public $__names = array(
    0 => '_NEW',
    1 => 'READY',
    2 => 'READY_PENDING',
  );
}

final class KylinJobStepStatus {
  const _NEW = 0;
  const PENDING = 1;
  const RUNNING = 2;
  const FINISHED = 3;
  const ERROR = 4;
  const DISCARDED = 5;
  const WAITING = 6;
  const KILLED = 7;
  static public $__names = array(
    0 => '_NEW',
    1 => 'PENDING',
    2 => 'RUNNING',
    3 => 'FINISHED',
    4 => 'ERROR',
    5 => 'DISCARDED',
    6 => 'WAITING',
    7 => 'KILLED',
  );
}

final class KylinJobStatus {
  const _NEW = 0;
  const PENDING = 1;
  const RUNNING = 2;
  const FINISHED = 3;
  const ERROR = 4;
  const DISCARDED = 5;
  static public $__names = array(
    0 => '_NEW',
    1 => 'PENDING',
    2 => 'RUNNING',
    3 => 'FINISHED',
    4 => 'ERROR',
    5 => 'DISCARDED',
  );
}

class KylinServerException extends TException {
  static $_TSPEC;

  /**
   * @var string
   */
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'KylinServerException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinServerException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinProject {
  static $_TSPEC;

  /**
   * @var string
   */
  public $projectName = null;
  /**
   * @var string
   */
  public $owner = null;
  /**
   * @var string
   */
  public $description = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'projectName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'owner',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['projectName'])) {
        $this->projectName = $vals['projectName'];
      }
      if (isset($vals['owner'])) {
        $this->owner = $vals['owner'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
    }
  }

  public function getName() {
    return 'KylinProject';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->projectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->owner);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinProject');
    if ($this->projectName !== null) {
      $xfer += $output->writeFieldBegin('projectName', TType::STRING, 1);
      $xfer += $output->writeString($this->projectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->owner !== null) {
      $xfer += $output->writeFieldBegin('owner', TType::STRING, 2);
      $xfer += $output->writeString($this->owner);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 3);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinCubeSegment {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $storageLocationIdentifier = null;
  /**
   * @var int
   */
  public $dateRangeStart = null;
  /**
   * @var int
   */
  public $dateRangeEnd = null;
  /**
   * @var int
   */
  public $lastBuildTime = null;
  /**
   * @var string
   */
  public $last_build_job_id = null;
  /**
   * @var int
   */
  public $createTimeUTC = null;
  /**
   * @var int
   */
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'storageLocationIdentifier',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'dateRangeStart',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'dateRangeEnd',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'lastBuildTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'last_build_job_id',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'createTimeUTC',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['storageLocationIdentifier'])) {
        $this->storageLocationIdentifier = $vals['storageLocationIdentifier'];
      }
      if (isset($vals['dateRangeStart'])) {
        $this->dateRangeStart = $vals['dateRangeStart'];
      }
      if (isset($vals['dateRangeEnd'])) {
        $this->dateRangeEnd = $vals['dateRangeEnd'];
      }
      if (isset($vals['lastBuildTime'])) {
        $this->lastBuildTime = $vals['lastBuildTime'];
      }
      if (isset($vals['last_build_job_id'])) {
        $this->last_build_job_id = $vals['last_build_job_id'];
      }
      if (isset($vals['createTimeUTC'])) {
        $this->createTimeUTC = $vals['createTimeUTC'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'KylinCubeSegment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->storageLocationIdentifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateRangeStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->dateRangeEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastBuildTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->last_build_job_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTimeUTC);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinCubeSegment');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->storageLocationIdentifier !== null) {
      $xfer += $output->writeFieldBegin('storageLocationIdentifier', TType::STRING, 2);
      $xfer += $output->writeString($this->storageLocationIdentifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateRangeStart !== null) {
      $xfer += $output->writeFieldBegin('dateRangeStart', TType::I64, 3);
      $xfer += $output->writeI64($this->dateRangeStart);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->dateRangeEnd !== null) {
      $xfer += $output->writeFieldBegin('dateRangeEnd', TType::I64, 4);
      $xfer += $output->writeI64($this->dateRangeEnd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastBuildTime !== null) {
      $xfer += $output->writeFieldBegin('lastBuildTime', TType::I64, 5);
      $xfer += $output->writeI64($this->lastBuildTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->last_build_job_id !== null) {
      $xfer += $output->writeFieldBegin('last_build_job_id', TType::STRING, 6);
      $xfer += $output->writeString($this->last_build_job_id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTimeUTC !== null) {
      $xfer += $output->writeFieldBegin('createTimeUTC', TType::I64, 7);
      $xfer += $output->writeI64($this->createTimeUTC);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 8);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinCube {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $owner = null;
  /**
   * @var string
   */
  public $version = null;
  /**
   * @var string
   */
  public $descName = null;
  /**
   * @var int
   */
  public $cost = null;
  /**
   * @var int
   */
  public $createTimeUTC = null;
  /**
   * @var string
   */
  public $projectName = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var \KylinCubeSegment[]
   */
  public $segments = null;
  /**
   * @var string
   */
  public $modelName = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'owner',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'version',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'descName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'cost',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'createTimeUTC',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'projectName',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'segments',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\KylinCubeSegment',
            ),
          ),
        10 => array(
          'var' => 'modelName',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['owner'])) {
        $this->owner = $vals['owner'];
      }
      if (isset($vals['version'])) {
        $this->version = $vals['version'];
      }
      if (isset($vals['descName'])) {
        $this->descName = $vals['descName'];
      }
      if (isset($vals['cost'])) {
        $this->cost = $vals['cost'];
      }
      if (isset($vals['createTimeUTC'])) {
        $this->createTimeUTC = $vals['createTimeUTC'];
      }
      if (isset($vals['projectName'])) {
        $this->projectName = $vals['projectName'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['segments'])) {
        $this->segments = $vals['segments'];
      }
      if (isset($vals['modelName'])) {
        $this->modelName = $vals['modelName'];
      }
    }
  }

  public function getName() {
    return 'KylinCube';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->owner);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->descName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTimeUTC);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->projectName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->segments = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \KylinCubeSegment();
              $xfer += $elem5->read($input);
              $this->segments []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->modelName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinCube');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->owner !== null) {
      $xfer += $output->writeFieldBegin('owner', TType::STRING, 2);
      $xfer += $output->writeString($this->owner);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->version !== null) {
      $xfer += $output->writeFieldBegin('version', TType::STRING, 3);
      $xfer += $output->writeString($this->version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->descName !== null) {
      $xfer += $output->writeFieldBegin('descName', TType::STRING, 4);
      $xfer += $output->writeString($this->descName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cost !== null) {
      $xfer += $output->writeFieldBegin('cost', TType::I32, 5);
      $xfer += $output->writeI32($this->cost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTimeUTC !== null) {
      $xfer += $output->writeFieldBegin('createTimeUTC', TType::I64, 6);
      $xfer += $output->writeI64($this->createTimeUTC);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->projectName !== null) {
      $xfer += $output->writeFieldBegin('projectName', TType::STRING, 7);
      $xfer += $output->writeString($this->projectName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 8);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->segments !== null) {
      if (!is_array($this->segments)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('segments', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->segments));
        {
          foreach ($this->segments as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->modelName !== null) {
      $xfer += $output->writeFieldBegin('modelName', TType::STRING, 10);
      $xfer += $output->writeString($this->modelName);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinJobStep {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $sequenceID = null;
  /**
   * @var int
   */
  public $execStartTime = null;
  /**
   * @var int
   */
  public $execEndTime = null;
  /**
   * @var int
   */
  public $execWaitTime = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var array
   */
  public $info = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sequenceID',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'execStartTime',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'execEndTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'execWaitTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'info',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['sequenceID'])) {
        $this->sequenceID = $vals['sequenceID'];
      }
      if (isset($vals['execStartTime'])) {
        $this->execStartTime = $vals['execStartTime'];
      }
      if (isset($vals['execEndTime'])) {
        $this->execEndTime = $vals['execEndTime'];
      }
      if (isset($vals['execWaitTime'])) {
        $this->execWaitTime = $vals['execWaitTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['info'])) {
        $this->info = $vals['info'];
      }
    }
  }

  public function getName() {
    return 'KylinJobStep';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sequenceID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->execStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->execEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->execWaitTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::MAP) {
            $this->info = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = '';
              $val13 = '';
              $xfer += $input->readString($key12);
              $xfer += $input->readString($val13);
              $this->info[$key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinJobStep');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sequenceID !== null) {
      $xfer += $output->writeFieldBegin('sequenceID', TType::I32, 3);
      $xfer += $output->writeI32($this->sequenceID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execStartTime !== null) {
      $xfer += $output->writeFieldBegin('execStartTime', TType::I64, 4);
      $xfer += $output->writeI64($this->execStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execEndTime !== null) {
      $xfer += $output->writeFieldBegin('execEndTime', TType::I64, 5);
      $xfer += $output->writeI64($this->execEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execWaitTime !== null) {
      $xfer += $output->writeFieldBegin('execWaitTime', TType::I64, 6);
      $xfer += $output->writeI64($this->execWaitTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->info !== null) {
      if (!is_array($this->info)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('info', TType::MAP, 8);
      {
        $output->writeMapBegin(TType::STRING, TType::STRING, count($this->info));
        {
          foreach ($this->info as $kiter14 => $viter15)
          {
            $xfer += $output->writeString($kiter14);
            $xfer += $output->writeString($viter15);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinJob {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $duration = null;
  /**
   * @var string
   */
  public $relatedCube = null;
  /**
   * @var string
   */
  public $relatedSegment = null;
  /**
   * @var int
   */
  public $execStartTime = null;
  /**
   * @var int
   */
  public $execEndTime = null;
  /**
   * @var int
   */
  public $mrWaiting = null;
  /**
   * @var \KylinJobStep[]
   */
  public $steps = null;
  /**
   * @var string
   */
  public $submitter = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var string
   */
  public $id = null;
  /**
   * @var double
   */
  public $process = null;
  /**
   * @var int
   */
  public $lastmodified = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'duration',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'relatedCube',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'relatedSegment',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'execStartTime',
          'type' => TType::I64,
          ),
        6 => array(
          'var' => 'execEndTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'mrWaiting',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'steps',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\KylinJobStep',
            ),
          ),
        9 => array(
          'var' => 'submitter',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'process',
          'type' => TType::DOUBLE,
          ),
        13 => array(
          'var' => 'lastmodified',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['duration'])) {
        $this->duration = $vals['duration'];
      }
      if (isset($vals['relatedCube'])) {
        $this->relatedCube = $vals['relatedCube'];
      }
      if (isset($vals['relatedSegment'])) {
        $this->relatedSegment = $vals['relatedSegment'];
      }
      if (isset($vals['execStartTime'])) {
        $this->execStartTime = $vals['execStartTime'];
      }
      if (isset($vals['execEndTime'])) {
        $this->execEndTime = $vals['execEndTime'];
      }
      if (isset($vals['mrWaiting'])) {
        $this->mrWaiting = $vals['mrWaiting'];
      }
      if (isset($vals['steps'])) {
        $this->steps = $vals['steps'];
      }
      if (isset($vals['submitter'])) {
        $this->submitter = $vals['submitter'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['process'])) {
        $this->process = $vals['process'];
      }
      if (isset($vals['lastmodified'])) {
        $this->lastmodified = $vals['lastmodified'];
      }
    }
  }

  public function getName() {
    return 'KylinJob';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->relatedCube);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->relatedSegment);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->execStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->execEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->mrWaiting);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::LST) {
            $this->steps = array();
            $_size16 = 0;
            $_etype19 = 0;
            $xfer += $input->readListBegin($_etype19, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $elem21 = null;
              $elem21 = new \KylinJobStep();
              $xfer += $elem21->read($input);
              $this->steps []= $elem21;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->submitter);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->process);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->lastmodified);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinJob');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duration !== null) {
      $xfer += $output->writeFieldBegin('duration', TType::I64, 2);
      $xfer += $output->writeI64($this->duration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedCube !== null) {
      $xfer += $output->writeFieldBegin('relatedCube', TType::STRING, 3);
      $xfer += $output->writeString($this->relatedCube);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->relatedSegment !== null) {
      $xfer += $output->writeFieldBegin('relatedSegment', TType::STRING, 4);
      $xfer += $output->writeString($this->relatedSegment);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execStartTime !== null) {
      $xfer += $output->writeFieldBegin('execStartTime', TType::I64, 5);
      $xfer += $output->writeI64($this->execStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->execEndTime !== null) {
      $xfer += $output->writeFieldBegin('execEndTime', TType::I64, 6);
      $xfer += $output->writeI64($this->execEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mrWaiting !== null) {
      $xfer += $output->writeFieldBegin('mrWaiting', TType::I64, 7);
      $xfer += $output->writeI64($this->mrWaiting);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->steps !== null) {
      if (!is_array($this->steps)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('steps', TType::LST, 8);
      {
        $output->writeListBegin(TType::STRUCT, count($this->steps));
        {
          foreach ($this->steps as $iter22)
          {
            $xfer += $iter22->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->submitter !== null) {
      $xfer += $output->writeFieldBegin('submitter', TType::STRING, 9);
      $xfer += $output->writeString($this->submitter);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 10);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 11);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->process !== null) {
      $xfer += $output->writeFieldBegin('process', TType::DOUBLE, 12);
      $xfer += $output->writeDouble($this->process);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lastmodified !== null) {
      $xfer += $output->writeFieldBegin('lastmodified', TType::I64, 13);
      $xfer += $output->writeI64($this->lastmodified);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryCache {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $project = null;
  /**
   * @var string
   */
  public $sql = null;
  /**
   * @var string
   */
  public $description = null;
  /**
   * @var string
   */
  public $id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'project',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sql',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'description',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['project'])) {
        $this->project = $vals['project'];
      }
      if (isset($vals['sql'])) {
        $this->sql = $vals['sql'];
      }
      if (isset($vals['description'])) {
        $this->description = $vals['description'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
    }
  }

  public function getName() {
    return 'QueryCache';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->project);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sql);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->description);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryCache');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->project !== null) {
      $xfer += $output->writeFieldBegin('project', TType::STRING, 2);
      $xfer += $output->writeString($this->project);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sql !== null) {
      $xfer += $output->writeFieldBegin('sql', TType::STRING, 3);
      $xfer += $output->writeString($this->sql);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->description !== null) {
      $xfer += $output->writeFieldBegin('description', TType::STRING, 4);
      $xfer += $output->writeString($this->description);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 5);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinSelectedColumnMeta {
  static $_TSPEC;

  /**
   * @var int
   */
  public $isNullable = null;
  /**
   * @var string
   */
  public $label = null;
  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isNullable',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'label',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isNullable'])) {
        $this->isNullable = $vals['isNullable'];
      }
      if (isset($vals['label'])) {
        $this->label = $vals['label'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'KylinSelectedColumnMeta';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isNullable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->label);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinSelectedColumnMeta');
    if ($this->isNullable !== null) {
      $xfer += $output->writeFieldBegin('isNullable', TType::I32, 1);
      $xfer += $output->writeI32($this->isNullable);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->label !== null) {
      $xfer += $output->writeFieldBegin('label', TType::STRING, 2);
      $xfer += $output->writeString($this->label);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class QueryResult {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $isException = null;
  /**
   * @var (string[])[]
   */
  public $queryresult = null;
  /**
   * @var int
   */
  public $duration = null;
  /**
   * @var int
   */
  public $totalScanCount = null;
  /**
   * @var string
   */
  public $cube = null;
  /**
   * @var string
   */
  public $exceptionMessage = null;
  /**
   * @var \KylinSelectedColumnMeta[]
   */
  public $columnMetas = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'isException',
          'type' => TType::BOOL,
          ),
        2 => array(
          'var' => 'queryresult',
          'type' => TType::LST,
          'etype' => TType::LST,
          'elem' => array(
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        3 => array(
          'var' => 'duration',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'totalScanCount',
          'type' => TType::I64,
          ),
        5 => array(
          'var' => 'cube',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'exceptionMessage',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'columnMetas',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\KylinSelectedColumnMeta',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['isException'])) {
        $this->isException = $vals['isException'];
      }
      if (isset($vals['queryresult'])) {
        $this->queryresult = $vals['queryresult'];
      }
      if (isset($vals['duration'])) {
        $this->duration = $vals['duration'];
      }
      if (isset($vals['totalScanCount'])) {
        $this->totalScanCount = $vals['totalScanCount'];
      }
      if (isset($vals['cube'])) {
        $this->cube = $vals['cube'];
      }
      if (isset($vals['exceptionMessage'])) {
        $this->exceptionMessage = $vals['exceptionMessage'];
      }
      if (isset($vals['columnMetas'])) {
        $this->columnMetas = $vals['columnMetas'];
      }
    }
  }

  public function getName() {
    return 'QueryResult';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isException);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->queryresult = array();
            $_size23 = 0;
            $_etype26 = 0;
            $xfer += $input->readListBegin($_etype26, $_size23);
            for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
            {
              $elem28 = null;
              $elem28 = array();
              $_size29 = 0;
              $_etype32 = 0;
              $xfer += $input->readListBegin($_etype32, $_size29);
              for ($_i33 = 0; $_i33 < $_size29; ++$_i33)
              {
                $elem34 = null;
                $xfer += $input->readString($elem34);
                $elem28 []= $elem34;
              }
              $xfer += $input->readListEnd();
              $this->queryresult []= $elem28;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->duration);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalScanCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->cube);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->exceptionMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::LST) {
            $this->columnMetas = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \KylinSelectedColumnMeta();
              $xfer += $elem40->read($input);
              $this->columnMetas []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryResult');
    if ($this->isException !== null) {
      $xfer += $output->writeFieldBegin('isException', TType::BOOL, 1);
      $xfer += $output->writeBool($this->isException);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->queryresult !== null) {
      if (!is_array($this->queryresult)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('queryresult', TType::LST, 2);
      {
        $output->writeListBegin(TType::LST, count($this->queryresult));
        {
          foreach ($this->queryresult as $iter41)
          {
            {
              $output->writeListBegin(TType::STRING, count($iter41));
              {
                foreach ($iter41 as $iter42)
                {
                  $xfer += $output->writeString($iter42);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->duration !== null) {
      $xfer += $output->writeFieldBegin('duration', TType::I64, 3);
      $xfer += $output->writeI64($this->duration);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalScanCount !== null) {
      $xfer += $output->writeFieldBegin('totalScanCount', TType::I64, 4);
      $xfer += $output->writeI64($this->totalScanCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cube !== null) {
      $xfer += $output->writeFieldBegin('cube', TType::STRING, 5);
      $xfer += $output->writeString($this->cube);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->exceptionMessage !== null) {
      $xfer += $output->writeFieldBegin('exceptionMessage', TType::STRING, 6);
      $xfer += $output->writeString($this->exceptionMessage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columnMetas !== null) {
      if (!is_array($this->columnMetas)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columnMetas', TType::LST, 7);
      {
        $output->writeListBegin(TType::STRUCT, count($this->columnMetas));
        {
          foreach ($this->columnMetas as $iter43)
          {
            $xfer += $iter43->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinColumnMeta {
  static $_TSPEC;

  /**
   * @var string
   */
  public $TABLE_CAT = null;
  /**
   * @var string
   */
  public $TABLE_SCHEM = null;
  /**
   * @var string
   */
  public $TABLE_NAME = null;
  /**
   * @var string
   */
  public $COLUMN_NAME = null;
  /**
   * @var int
   */
  public $DATA_TYPE = null;
  /**
   * @var string
   */
  public $TYPE_NAME = null;
  /**
   * @var int
   */
  public $COLUMN_SIZE = null;
  /**
   * @var int
   */
  public $BUFFER_LENGTH = null;
  /**
   * @var int
   */
  public $DECIMAL_DIGITS = null;
  /**
   * @var int
   */
  public $NUM_PREC_RADIX = null;
  /**
   * @var int
   */
  public $NULLABLE = null;
  /**
   * @var string
   */
  public $REMARKS = null;
  /**
   * @var string
   */
  public $COLUMN_DEF = null;
  /**
   * @var int
   */
  public $SQL_DATA_TYPE = null;
  /**
   * @var int
   */
  public $SQL_DATETIME_SUB = null;
  /**
   * @var int
   */
  public $CHAR_OCTET_LENGTH = null;
  /**
   * @var int
   */
  public $ORDINAL_POSITION = null;
  /**
   * @var string
   */
  public $IS_NULLABLE = null;
  /**
   * @var string
   */
  public $SCOPE_CATLOG = null;
  /**
   * @var string
   */
  public $SCOPE_SCHEMA = null;
  /**
   * @var string
   */
  public $SCOPE_TABLE = null;
  /**
   * @var int
   */
  public $SOURCE_DATA_TYPE = null;
  /**
   * @var string
   */
  public $IS_AUTOINCREMENT = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'TABLE_CAT',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'TABLE_SCHEM',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'TABLE_NAME',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'COLUMN_NAME',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'DATA_TYPE',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'TYPE_NAME',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'COLUMN_SIZE',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'BUFFER_LENGTH',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'DECIMAL_DIGITS',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'NUM_PREC_RADIX',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'NULLABLE',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'REMARKS',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'COLUMN_DEF',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'SQL_DATA_TYPE',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'SQL_DATETIME_SUB',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'CHAR_OCTET_LENGTH',
          'type' => TType::I32,
          ),
        17 => array(
          'var' => 'ORDINAL_POSITION',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'IS_NULLABLE',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'SCOPE_CATLOG',
          'type' => TType::STRING,
          ),
        20 => array(
          'var' => 'SCOPE_SCHEMA',
          'type' => TType::STRING,
          ),
        21 => array(
          'var' => 'SCOPE_TABLE',
          'type' => TType::STRING,
          ),
        22 => array(
          'var' => 'SOURCE_DATA_TYPE',
          'type' => TType::I16,
          ),
        23 => array(
          'var' => 'IS_AUTOINCREMENT',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['TABLE_CAT'])) {
        $this->TABLE_CAT = $vals['TABLE_CAT'];
      }
      if (isset($vals['TABLE_SCHEM'])) {
        $this->TABLE_SCHEM = $vals['TABLE_SCHEM'];
      }
      if (isset($vals['TABLE_NAME'])) {
        $this->TABLE_NAME = $vals['TABLE_NAME'];
      }
      if (isset($vals['COLUMN_NAME'])) {
        $this->COLUMN_NAME = $vals['COLUMN_NAME'];
      }
      if (isset($vals['DATA_TYPE'])) {
        $this->DATA_TYPE = $vals['DATA_TYPE'];
      }
      if (isset($vals['TYPE_NAME'])) {
        $this->TYPE_NAME = $vals['TYPE_NAME'];
      }
      if (isset($vals['COLUMN_SIZE'])) {
        $this->COLUMN_SIZE = $vals['COLUMN_SIZE'];
      }
      if (isset($vals['BUFFER_LENGTH'])) {
        $this->BUFFER_LENGTH = $vals['BUFFER_LENGTH'];
      }
      if (isset($vals['DECIMAL_DIGITS'])) {
        $this->DECIMAL_DIGITS = $vals['DECIMAL_DIGITS'];
      }
      if (isset($vals['NUM_PREC_RADIX'])) {
        $this->NUM_PREC_RADIX = $vals['NUM_PREC_RADIX'];
      }
      if (isset($vals['NULLABLE'])) {
        $this->NULLABLE = $vals['NULLABLE'];
      }
      if (isset($vals['REMARKS'])) {
        $this->REMARKS = $vals['REMARKS'];
      }
      if (isset($vals['COLUMN_DEF'])) {
        $this->COLUMN_DEF = $vals['COLUMN_DEF'];
      }
      if (isset($vals['SQL_DATA_TYPE'])) {
        $this->SQL_DATA_TYPE = $vals['SQL_DATA_TYPE'];
      }
      if (isset($vals['SQL_DATETIME_SUB'])) {
        $this->SQL_DATETIME_SUB = $vals['SQL_DATETIME_SUB'];
      }
      if (isset($vals['CHAR_OCTET_LENGTH'])) {
        $this->CHAR_OCTET_LENGTH = $vals['CHAR_OCTET_LENGTH'];
      }
      if (isset($vals['ORDINAL_POSITION'])) {
        $this->ORDINAL_POSITION = $vals['ORDINAL_POSITION'];
      }
      if (isset($vals['IS_NULLABLE'])) {
        $this->IS_NULLABLE = $vals['IS_NULLABLE'];
      }
      if (isset($vals['SCOPE_CATLOG'])) {
        $this->SCOPE_CATLOG = $vals['SCOPE_CATLOG'];
      }
      if (isset($vals['SCOPE_SCHEMA'])) {
        $this->SCOPE_SCHEMA = $vals['SCOPE_SCHEMA'];
      }
      if (isset($vals['SCOPE_TABLE'])) {
        $this->SCOPE_TABLE = $vals['SCOPE_TABLE'];
      }
      if (isset($vals['SOURCE_DATA_TYPE'])) {
        $this->SOURCE_DATA_TYPE = $vals['SOURCE_DATA_TYPE'];
      }
      if (isset($vals['IS_AUTOINCREMENT'])) {
        $this->IS_AUTOINCREMENT = $vals['IS_AUTOINCREMENT'];
      }
    }
  }

  public function getName() {
    return 'KylinColumnMeta';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TABLE_CAT);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TABLE_SCHEM);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TABLE_NAME);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->COLUMN_NAME);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->DATA_TYPE);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TYPE_NAME);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->COLUMN_SIZE);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->BUFFER_LENGTH);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->DECIMAL_DIGITS);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->NUM_PREC_RADIX);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->NULLABLE);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->REMARKS);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->COLUMN_DEF);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->SQL_DATA_TYPE);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->SQL_DATETIME_SUB);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->CHAR_OCTET_LENGTH);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ORDINAL_POSITION);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->IS_NULLABLE);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SCOPE_CATLOG);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SCOPE_SCHEMA);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SCOPE_TABLE);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->SOURCE_DATA_TYPE);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->IS_AUTOINCREMENT);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinColumnMeta');
    if ($this->TABLE_CAT !== null) {
      $xfer += $output->writeFieldBegin('TABLE_CAT', TType::STRING, 1);
      $xfer += $output->writeString($this->TABLE_CAT);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TABLE_SCHEM !== null) {
      $xfer += $output->writeFieldBegin('TABLE_SCHEM', TType::STRING, 2);
      $xfer += $output->writeString($this->TABLE_SCHEM);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TABLE_NAME !== null) {
      $xfer += $output->writeFieldBegin('TABLE_NAME', TType::STRING, 3);
      $xfer += $output->writeString($this->TABLE_NAME);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->COLUMN_NAME !== null) {
      $xfer += $output->writeFieldBegin('COLUMN_NAME', TType::STRING, 4);
      $xfer += $output->writeString($this->COLUMN_NAME);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DATA_TYPE !== null) {
      $xfer += $output->writeFieldBegin('DATA_TYPE', TType::I32, 5);
      $xfer += $output->writeI32($this->DATA_TYPE);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TYPE_NAME !== null) {
      $xfer += $output->writeFieldBegin('TYPE_NAME', TType::STRING, 6);
      $xfer += $output->writeString($this->TYPE_NAME);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->COLUMN_SIZE !== null) {
      $xfer += $output->writeFieldBegin('COLUMN_SIZE', TType::I32, 7);
      $xfer += $output->writeI32($this->COLUMN_SIZE);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->BUFFER_LENGTH !== null) {
      $xfer += $output->writeFieldBegin('BUFFER_LENGTH', TType::I32, 8);
      $xfer += $output->writeI32($this->BUFFER_LENGTH);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DECIMAL_DIGITS !== null) {
      $xfer += $output->writeFieldBegin('DECIMAL_DIGITS', TType::I32, 9);
      $xfer += $output->writeI32($this->DECIMAL_DIGITS);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->NUM_PREC_RADIX !== null) {
      $xfer += $output->writeFieldBegin('NUM_PREC_RADIX', TType::I32, 10);
      $xfer += $output->writeI32($this->NUM_PREC_RADIX);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->NULLABLE !== null) {
      $xfer += $output->writeFieldBegin('NULLABLE', TType::I32, 11);
      $xfer += $output->writeI32($this->NULLABLE);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->REMARKS !== null) {
      $xfer += $output->writeFieldBegin('REMARKS', TType::STRING, 12);
      $xfer += $output->writeString($this->REMARKS);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->COLUMN_DEF !== null) {
      $xfer += $output->writeFieldBegin('COLUMN_DEF', TType::STRING, 13);
      $xfer += $output->writeString($this->COLUMN_DEF);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SQL_DATA_TYPE !== null) {
      $xfer += $output->writeFieldBegin('SQL_DATA_TYPE', TType::I32, 14);
      $xfer += $output->writeI32($this->SQL_DATA_TYPE);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SQL_DATETIME_SUB !== null) {
      $xfer += $output->writeFieldBegin('SQL_DATETIME_SUB', TType::I32, 15);
      $xfer += $output->writeI32($this->SQL_DATETIME_SUB);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->CHAR_OCTET_LENGTH !== null) {
      $xfer += $output->writeFieldBegin('CHAR_OCTET_LENGTH', TType::I32, 16);
      $xfer += $output->writeI32($this->CHAR_OCTET_LENGTH);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ORDINAL_POSITION !== null) {
      $xfer += $output->writeFieldBegin('ORDINAL_POSITION', TType::I32, 17);
      $xfer += $output->writeI32($this->ORDINAL_POSITION);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IS_NULLABLE !== null) {
      $xfer += $output->writeFieldBegin('IS_NULLABLE', TType::STRING, 18);
      $xfer += $output->writeString($this->IS_NULLABLE);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SCOPE_CATLOG !== null) {
      $xfer += $output->writeFieldBegin('SCOPE_CATLOG', TType::STRING, 19);
      $xfer += $output->writeString($this->SCOPE_CATLOG);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SCOPE_SCHEMA !== null) {
      $xfer += $output->writeFieldBegin('SCOPE_SCHEMA', TType::STRING, 20);
      $xfer += $output->writeString($this->SCOPE_SCHEMA);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SCOPE_TABLE !== null) {
      $xfer += $output->writeFieldBegin('SCOPE_TABLE', TType::STRING, 21);
      $xfer += $output->writeString($this->SCOPE_TABLE);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SOURCE_DATA_TYPE !== null) {
      $xfer += $output->writeFieldBegin('SOURCE_DATA_TYPE', TType::I16, 22);
      $xfer += $output->writeI16($this->SOURCE_DATA_TYPE);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->IS_AUTOINCREMENT !== null) {
      $xfer += $output->writeFieldBegin('IS_AUTOINCREMENT', TType::STRING, 23);
      $xfer += $output->writeString($this->IS_AUTOINCREMENT);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinTableMeta {
  static $_TSPEC;

  /**
   * @var string
   */
  public $TABLE_CAT = null;
  /**
   * @var string
   */
  public $TABLE_SCHEM = null;
  /**
   * @var string
   */
  public $TABLE_NAME = null;
  /**
   * @var string
   */
  public $TABLE_TYPE = null;
  /**
   * @var string
   */
  public $REMARKS = null;
  /**
   * @var string
   */
  public $TYPE_CAT = null;
  /**
   * @var string
   */
  public $TYPE_SCHEM = null;
  /**
   * @var string
   */
  public $TYPE_NAME = null;
  /**
   * @var string
   */
  public $SELF_REFERENCING_COL_NAME = null;
  /**
   * @var string
   */
  public $REF_GENERATION = null;
  /**
   * @var \KylinColumnMeta[]
   */
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'TABLE_CAT',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'TABLE_SCHEM',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'TABLE_NAME',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'TABLE_TYPE',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'REMARKS',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'TYPE_CAT',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'TYPE_SCHEM',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'TYPE_NAME',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'SELF_REFERENCING_COL_NAME',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'REF_GENERATION',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\KylinColumnMeta',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['TABLE_CAT'])) {
        $this->TABLE_CAT = $vals['TABLE_CAT'];
      }
      if (isset($vals['TABLE_SCHEM'])) {
        $this->TABLE_SCHEM = $vals['TABLE_SCHEM'];
      }
      if (isset($vals['TABLE_NAME'])) {
        $this->TABLE_NAME = $vals['TABLE_NAME'];
      }
      if (isset($vals['TABLE_TYPE'])) {
        $this->TABLE_TYPE = $vals['TABLE_TYPE'];
      }
      if (isset($vals['REMARKS'])) {
        $this->REMARKS = $vals['REMARKS'];
      }
      if (isset($vals['TYPE_CAT'])) {
        $this->TYPE_CAT = $vals['TYPE_CAT'];
      }
      if (isset($vals['TYPE_SCHEM'])) {
        $this->TYPE_SCHEM = $vals['TYPE_SCHEM'];
      }
      if (isset($vals['TYPE_NAME'])) {
        $this->TYPE_NAME = $vals['TYPE_NAME'];
      }
      if (isset($vals['SELF_REFERENCING_COL_NAME'])) {
        $this->SELF_REFERENCING_COL_NAME = $vals['SELF_REFERENCING_COL_NAME'];
      }
      if (isset($vals['REF_GENERATION'])) {
        $this->REF_GENERATION = $vals['REF_GENERATION'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
    }
  }

  public function getName() {
    return 'KylinTableMeta';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TABLE_CAT);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TABLE_SCHEM);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TABLE_NAME);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TABLE_TYPE);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->REMARKS);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TYPE_CAT);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TYPE_SCHEM);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->TYPE_NAME);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->SELF_REFERENCING_COL_NAME);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->REF_GENERATION);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size44 = 0;
            $_etype47 = 0;
            $xfer += $input->readListBegin($_etype47, $_size44);
            for ($_i48 = 0; $_i48 < $_size44; ++$_i48)
            {
              $elem49 = null;
              $elem49 = new \KylinColumnMeta();
              $xfer += $elem49->read($input);
              $this->columns []= $elem49;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinTableMeta');
    if ($this->TABLE_CAT !== null) {
      $xfer += $output->writeFieldBegin('TABLE_CAT', TType::STRING, 1);
      $xfer += $output->writeString($this->TABLE_CAT);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TABLE_SCHEM !== null) {
      $xfer += $output->writeFieldBegin('TABLE_SCHEM', TType::STRING, 2);
      $xfer += $output->writeString($this->TABLE_SCHEM);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TABLE_NAME !== null) {
      $xfer += $output->writeFieldBegin('TABLE_NAME', TType::STRING, 3);
      $xfer += $output->writeString($this->TABLE_NAME);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TABLE_TYPE !== null) {
      $xfer += $output->writeFieldBegin('TABLE_TYPE', TType::STRING, 4);
      $xfer += $output->writeString($this->TABLE_TYPE);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->REMARKS !== null) {
      $xfer += $output->writeFieldBegin('REMARKS', TType::STRING, 5);
      $xfer += $output->writeString($this->REMARKS);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TYPE_CAT !== null) {
      $xfer += $output->writeFieldBegin('TYPE_CAT', TType::STRING, 6);
      $xfer += $output->writeString($this->TYPE_CAT);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TYPE_SCHEM !== null) {
      $xfer += $output->writeFieldBegin('TYPE_SCHEM', TType::STRING, 7);
      $xfer += $output->writeString($this->TYPE_SCHEM);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->TYPE_NAME !== null) {
      $xfer += $output->writeFieldBegin('TYPE_NAME', TType::STRING, 8);
      $xfer += $output->writeString($this->TYPE_NAME);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->SELF_REFERENCING_COL_NAME !== null) {
      $xfer += $output->writeFieldBegin('SELF_REFERENCING_COL_NAME', TType::STRING, 9);
      $xfer += $output->writeString($this->SELF_REFERENCING_COL_NAME);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->REF_GENERATION !== null) {
      $xfer += $output->writeFieldBegin('REF_GENERATION', TType::STRING, 10);
      $xfer += $output->writeString($this->REF_GENERATION);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 11);
      {
        $output->writeListBegin(TType::STRUCT, count($this->columns));
        {
          foreach ($this->columns as $iter50)
          {
            $xfer += $iter50->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinDataType {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $precision = null;
  /**
   * @var int
   */
  public $scale = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'precision',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'scale',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['precision'])) {
        $this->precision = $vals['precision'];
      }
      if (isset($vals['scale'])) {
        $this->scale = $vals['scale'];
      }
    }
  }

  public function getName() {
    return 'KylinDataType';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->precision);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->scale);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinDataType');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->precision !== null) {
      $xfer += $output->writeFieldBegin('precision', TType::I32, 2);
      $xfer += $output->writeI32($this->precision);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->scale !== null) {
      $xfer += $output->writeFieldBegin('scale', TType::I32, 3);
      $xfer += $output->writeI32($this->scale);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinColumnDesc {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $datatype = null;
  /**
   * @var \KylinDataType
   */
  public $type = null;
  /**
   * @var int
   */
  public $zeroBaseIndex = null;
  /**
   * @var bool
   */
  public $isNullable = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'datatype',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::STRUCT,
          'class' => '\KylinDataType',
          ),
        5 => array(
          'var' => 'zeroBaseIndex',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'isNullable',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['datatype'])) {
        $this->datatype = $vals['datatype'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['zeroBaseIndex'])) {
        $this->zeroBaseIndex = $vals['zeroBaseIndex'];
      }
      if (isset($vals['isNullable'])) {
        $this->isNullable = $vals['isNullable'];
      }
    }
  }

  public function getName() {
    return 'KylinColumnDesc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->datatype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->type = new \KylinDataType();
            $xfer += $this->type->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->zeroBaseIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isNullable);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinColumnDesc');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->datatype !== null) {
      $xfer += $output->writeFieldBegin('datatype', TType::STRING, 3);
      $xfer += $output->writeString($this->datatype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      if (!is_object($this->type)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('type', TType::STRUCT, 4);
      $xfer += $this->type->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->zeroBaseIndex !== null) {
      $xfer += $output->writeFieldBegin('zeroBaseIndex', TType::I32, 5);
      $xfer += $output->writeI32($this->zeroBaseIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isNullable !== null) {
      $xfer += $output->writeFieldBegin('isNullable', TType::BOOL, 6);
      $xfer += $output->writeBool($this->isNullable);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinDatabaseDesc {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'KylinDatabaseDesc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinDatabaseDesc');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinTableDesc {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var \KylinColumnDesc[]
   */
  public $columns = null;
  /**
   * @var \KylinDatabaseDesc
   */
  public $database = null;
  /**
   * @var string
   */
  public $identity = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\KylinColumnDesc',
            ),
          ),
        3 => array(
          'var' => 'database',
          'type' => TType::STRUCT,
          'class' => '\KylinDatabaseDesc',
          ),
        4 => array(
          'var' => 'identity',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['columns'])) {
        $this->columns = $vals['columns'];
      }
      if (isset($vals['database'])) {
        $this->database = $vals['database'];
      }
      if (isset($vals['identity'])) {
        $this->identity = $vals['identity'];
      }
    }
  }

  public function getName() {
    return 'KylinTableDesc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->columns = array();
            $_size51 = 0;
            $_etype54 = 0;
            $xfer += $input->readListBegin($_etype54, $_size51);
            for ($_i55 = 0; $_i55 < $_size51; ++$_i55)
            {
              $elem56 = null;
              $elem56 = new \KylinColumnDesc();
              $xfer += $elem56->read($input);
              $this->columns []= $elem56;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->database = new \KylinDatabaseDesc();
            $xfer += $this->database->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identity);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinTableDesc');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columns !== null) {
      if (!is_array($this->columns)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('columns', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->columns));
        {
          foreach ($this->columns as $iter57)
          {
            $xfer += $iter57->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->database !== null) {
      if (!is_object($this->database)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('database', TType::STRUCT, 3);
      $xfer += $this->database->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->identity !== null) {
      $xfer += $output->writeFieldBegin('identity', TType::STRING, 4);
      $xfer += $output->writeString($this->identity);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinPartitionDesc {
  static $_TSPEC;

  /**
   * @var string
   */
  public $partitionDateColumn = null;
  /**
   * @var int
   */
  public $partitionDateStart = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'partitionDateColumn',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'partitionDateStart',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['partitionDateColumn'])) {
        $this->partitionDateColumn = $vals['partitionDateColumn'];
      }
      if (isset($vals['partitionDateStart'])) {
        $this->partitionDateStart = $vals['partitionDateStart'];
      }
    }
  }

  public function getName() {
    return 'KylinPartitionDesc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->partitionDateColumn);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->partitionDateStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinPartitionDesc');
    if ($this->partitionDateColumn !== null) {
      $xfer += $output->writeFieldBegin('partitionDateColumn', TType::STRING, 1);
      $xfer += $output->writeString($this->partitionDateColumn);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partitionDateStart !== null) {
      $xfer += $output->writeFieldBegin('partitionDateStart', TType::I64, 2);
      $xfer += $output->writeI64($this->partitionDateStart);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinJoinDesc {
  static $_TSPEC;

  /**
   * @var string
   */
  public $type = null;
  /**
   * @var string[]
   */
  public $primaryKey = null;
  /**
   * @var string[]
   */
  public $foreignKey = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'type',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'primaryKey',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'foreignKey',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['primaryKey'])) {
        $this->primaryKey = $vals['primaryKey'];
      }
      if (isset($vals['foreignKey'])) {
        $this->foreignKey = $vals['foreignKey'];
      }
    }
  }

  public function getName() {
    return 'KylinJoinDesc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->primaryKey = array();
            $_size58 = 0;
            $_etype61 = 0;
            $xfer += $input->readListBegin($_etype61, $_size58);
            for ($_i62 = 0; $_i62 < $_size58; ++$_i62)
            {
              $elem63 = null;
              $xfer += $input->readString($elem63);
              $this->primaryKey []= $elem63;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->foreignKey = array();
            $_size64 = 0;
            $_etype67 = 0;
            $xfer += $input->readListBegin($_etype67, $_size64);
            for ($_i68 = 0; $_i68 < $_size64; ++$_i68)
            {
              $elem69 = null;
              $xfer += $input->readString($elem69);
              $this->foreignKey []= $elem69;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinJoinDesc');
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::STRING, 1);
      $xfer += $output->writeString($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->primaryKey !== null) {
      if (!is_array($this->primaryKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('primaryKey', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->primaryKey));
        {
          foreach ($this->primaryKey as $iter70)
          {
            $xfer += $output->writeString($iter70);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->foreignKey !== null) {
      if (!is_array($this->foreignKey)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('foreignKey', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRING, count($this->foreignKey));
        {
          foreach ($this->foreignKey as $iter71)
          {
            $xfer += $output->writeString($iter71);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinLookUpDesc {
  static $_TSPEC;

  /**
   * @var string
   */
  public $table = null;
  /**
   * @var \KylinJoinDesc
   */
  public $join = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'table',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'join',
          'type' => TType::STRUCT,
          'class' => '\KylinJoinDesc',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['table'])) {
        $this->table = $vals['table'];
      }
      if (isset($vals['join'])) {
        $this->join = $vals['join'];
      }
    }
  }

  public function getName() {
    return 'KylinLookUpDesc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->table);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->join = new \KylinJoinDesc();
            $xfer += $this->join->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinLookUpDesc');
    if ($this->table !== null) {
      $xfer += $output->writeFieldBegin('table', TType::STRING, 1);
      $xfer += $output->writeString($this->table);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->join !== null) {
      if (!is_object($this->join)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('join', TType::STRUCT, 2);
      $xfer += $this->join->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class KylinModelDesc {
  static $_TSPEC;

  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $fact_table = null;
  /**
   * @var \KylinLookUpDesc[]
   */
  public $lookups = null;
  /**
   * @var \KylinPartitionDesc
   */
  public $partitionDesc = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'fact_table',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'lookups',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\KylinLookUpDesc',
            ),
          ),
        4 => array(
          'var' => 'partitionDesc',
          'type' => TType::STRUCT,
          'class' => '\KylinPartitionDesc',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['fact_table'])) {
        $this->fact_table = $vals['fact_table'];
      }
      if (isset($vals['lookups'])) {
        $this->lookups = $vals['lookups'];
      }
      if (isset($vals['partitionDesc'])) {
        $this->partitionDesc = $vals['partitionDesc'];
      }
    }
  }

  public function getName() {
    return 'KylinModelDesc';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->fact_table);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->lookups = array();
            $_size72 = 0;
            $_etype75 = 0;
            $xfer += $input->readListBegin($_etype75, $_size72);
            for ($_i76 = 0; $_i76 < $_size72; ++$_i76)
            {
              $elem77 = null;
              $elem77 = new \KylinLookUpDesc();
              $xfer += $elem77->read($input);
              $this->lookups []= $elem77;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->partitionDesc = new \KylinPartitionDesc();
            $xfer += $this->partitionDesc->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KylinModelDesc');
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 1);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->fact_table !== null) {
      $xfer += $output->writeFieldBegin('fact_table', TType::STRING, 2);
      $xfer += $output->writeString($this->fact_table);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->lookups !== null) {
      if (!is_array($this->lookups)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('lookups', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->lookups));
        {
          foreach ($this->lookups as $iter78)
          {
            $xfer += $iter78->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->partitionDesc !== null) {
      if (!is_object($this->partitionDesc)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('partitionDesc', TType::STRUCT, 4);
      $xfer += $this->partitionDesc->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


