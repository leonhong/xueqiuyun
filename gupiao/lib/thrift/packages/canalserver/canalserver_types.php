<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class canalserver {
  static $_TSPEC;

  public $canalName = null;
  public $canalIp = null;
  public $canal = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'canalName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'canalIp',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'canal',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['canalName'])) {
        $this->canalName = $vals['canalName'];
      }
      if (isset($vals['canalIp'])) {
        $this->canalIp = $vals['canalIp'];
      }
      if (isset($vals['canal'])) {
        $this->canal = $vals['canal'];
      }
    }
  }

  public function getName() {
    return 'canalserver';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalIp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canal);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('canalserver');
    if ($this->canalName !== null) {
      $xfer += $output->writeFieldBegin('canalName', TType::STRING, 1);
      $xfer += $output->writeString($this->canalName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canalIp !== null) {
      $xfer += $output->writeFieldBegin('canalIp', TType::STRING, 2);
      $xfer += $output->writeString($this->canalIp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canal !== null) {
      $xfer += $output->writeFieldBegin('canal', TType::STRING, 3);
      $xfer += $output->writeString($this->canal);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class canalServerInfo {
  static $_TSPEC;

  public $canalTaskID = null;
  public $canalName = null;
  public $canalServerIP = null;
  public $canalServerPost = null;
  public $destinations = null;
  public $mysqlip = null;
  public $mysqlpost = null;
  public $mysqluser = null;
  public $mysqlpasswd = null;
  public $mysqldatabase = null;
  public $status = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'canalTaskID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'canalName',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'canalServerIP',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'canalServerPost',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'destinations',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'mysqlip',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'mysqlpost',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'mysqluser',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'mysqlpasswd',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'mysqldatabase',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['canalTaskID'])) {
        $this->canalTaskID = $vals['canalTaskID'];
      }
      if (isset($vals['canalName'])) {
        $this->canalName = $vals['canalName'];
      }
      if (isset($vals['canalServerIP'])) {
        $this->canalServerIP = $vals['canalServerIP'];
      }
      if (isset($vals['canalServerPost'])) {
        $this->canalServerPost = $vals['canalServerPost'];
      }
      if (isset($vals['destinations'])) {
        $this->destinations = $vals['destinations'];
      }
      if (isset($vals['mysqlip'])) {
        $this->mysqlip = $vals['mysqlip'];
      }
      if (isset($vals['mysqlpost'])) {
        $this->mysqlpost = $vals['mysqlpost'];
      }
      if (isset($vals['mysqluser'])) {
        $this->mysqluser = $vals['mysqluser'];
      }
      if (isset($vals['mysqlpasswd'])) {
        $this->mysqlpasswd = $vals['mysqlpasswd'];
      }
      if (isset($vals['mysqldatabase'])) {
        $this->mysqldatabase = $vals['mysqldatabase'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
    }
  }

  public function getName() {
    return 'canalServerInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalTaskID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalServerIP);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalServerPost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destinations);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mysqlip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mysqlpost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mysqluser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mysqlpasswd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mysqldatabase);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('canalServerInfo');
    if ($this->canalTaskID !== null) {
      $xfer += $output->writeFieldBegin('canalTaskID', TType::STRING, 1);
      $xfer += $output->writeString($this->canalTaskID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canalName !== null) {
      $xfer += $output->writeFieldBegin('canalName', TType::STRING, 2);
      $xfer += $output->writeString($this->canalName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canalServerIP !== null) {
      $xfer += $output->writeFieldBegin('canalServerIP', TType::STRING, 3);
      $xfer += $output->writeString($this->canalServerIP);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canalServerPost !== null) {
      $xfer += $output->writeFieldBegin('canalServerPost', TType::STRING, 4);
      $xfer += $output->writeString($this->canalServerPost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destinations !== null) {
      $xfer += $output->writeFieldBegin('destinations', TType::STRING, 5);
      $xfer += $output->writeString($this->destinations);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mysqlip !== null) {
      $xfer += $output->writeFieldBegin('mysqlip', TType::STRING, 6);
      $xfer += $output->writeString($this->mysqlip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mysqlpost !== null) {
      $xfer += $output->writeFieldBegin('mysqlpost', TType::STRING, 7);
      $xfer += $output->writeString($this->mysqlpost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mysqluser !== null) {
      $xfer += $output->writeFieldBegin('mysqluser', TType::STRING, 8);
      $xfer += $output->writeString($this->mysqluser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mysqlpasswd !== null) {
      $xfer += $output->writeFieldBegin('mysqlpasswd', TType::STRING, 9);
      $xfer += $output->writeString($this->mysqlpasswd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mysqldatabase !== null) {
      $xfer += $output->writeFieldBegin('mysqldatabase', TType::STRING, 10);
      $xfer += $output->writeString($this->mysqldatabase);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 11);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class hbaseSyncInfo {
  static $_TSPEC;

  public $syncTaskID = null;
  public $canalTaskID = null;
  public $hbaseSyncname = null;
  public $queueName = null;
  public $hbaseSybcServerIp = null;
  public $canalClientIP = null;
  public $canalServerIp = null;
  public $canalServerPost = null;
  public $destination = null;
  public $canalUser = null;
  public $canalPasswd = null;
  public $mysqlip = null;
  public $mysqlDatabase = null;
  public $canalServerName = null;
  public $status = null;
  public $stateMessage = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'syncTaskID',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'canalTaskID',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'hbaseSyncname',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'queueName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'hbaseSybcServerIp',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'canalClientIP',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'canalServerIp',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'canalServerPost',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'destination',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'canalUser',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'canalPasswd',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'mysqlip',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'mysqlDatabase',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'canalServerName',
          'type' => TType::STRING,
          ),
        15 => array(
          'var' => 'status',
          'type' => TType::STRING,
          ),
        16 => array(
          'var' => 'stateMessage',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['syncTaskID'])) {
        $this->syncTaskID = $vals['syncTaskID'];
      }
      if (isset($vals['canalTaskID'])) {
        $this->canalTaskID = $vals['canalTaskID'];
      }
      if (isset($vals['hbaseSyncname'])) {
        $this->hbaseSyncname = $vals['hbaseSyncname'];
      }
      if (isset($vals['queueName'])) {
        $this->queueName = $vals['queueName'];
      }
      if (isset($vals['hbaseSybcServerIp'])) {
        $this->hbaseSybcServerIp = $vals['hbaseSybcServerIp'];
      }
      if (isset($vals['canalClientIP'])) {
        $this->canalClientIP = $vals['canalClientIP'];
      }
      if (isset($vals['canalServerIp'])) {
        $this->canalServerIp = $vals['canalServerIp'];
      }
      if (isset($vals['canalServerPost'])) {
        $this->canalServerPost = $vals['canalServerPost'];
      }
      if (isset($vals['destination'])) {
        $this->destination = $vals['destination'];
      }
      if (isset($vals['canalUser'])) {
        $this->canalUser = $vals['canalUser'];
      }
      if (isset($vals['canalPasswd'])) {
        $this->canalPasswd = $vals['canalPasswd'];
      }
      if (isset($vals['mysqlip'])) {
        $this->mysqlip = $vals['mysqlip'];
      }
      if (isset($vals['mysqlDatabase'])) {
        $this->mysqlDatabase = $vals['mysqlDatabase'];
      }
      if (isset($vals['canalServerName'])) {
        $this->canalServerName = $vals['canalServerName'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['stateMessage'])) {
        $this->stateMessage = $vals['stateMessage'];
      }
    }
  }

  public function getName() {
    return 'hbaseSyncInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->syncTaskID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalTaskID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hbaseSyncname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->queueName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->hbaseSybcServerIp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalClientIP);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalServerIp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalServerPost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->destination);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalPasswd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mysqlip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mysqlDatabase);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->canalServerName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->stateMessage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('hbaseSyncInfo');
    if ($this->syncTaskID !== null) {
      $xfer += $output->writeFieldBegin('syncTaskID', TType::STRING, 1);
      $xfer += $output->writeString($this->syncTaskID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canalTaskID !== null) {
      $xfer += $output->writeFieldBegin('canalTaskID', TType::STRING, 2);
      $xfer += $output->writeString($this->canalTaskID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hbaseSyncname !== null) {
      $xfer += $output->writeFieldBegin('hbaseSyncname', TType::STRING, 3);
      $xfer += $output->writeString($this->hbaseSyncname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->queueName !== null) {
      $xfer += $output->writeFieldBegin('queueName', TType::STRING, 4);
      $xfer += $output->writeString($this->queueName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hbaseSybcServerIp !== null) {
      $xfer += $output->writeFieldBegin('hbaseSybcServerIp', TType::STRING, 5);
      $xfer += $output->writeString($this->hbaseSybcServerIp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canalClientIP !== null) {
      $xfer += $output->writeFieldBegin('canalClientIP', TType::STRING, 6);
      $xfer += $output->writeString($this->canalClientIP);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canalServerIp !== null) {
      $xfer += $output->writeFieldBegin('canalServerIp', TType::STRING, 7);
      $xfer += $output->writeString($this->canalServerIp);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canalServerPost !== null) {
      $xfer += $output->writeFieldBegin('canalServerPost', TType::STRING, 8);
      $xfer += $output->writeString($this->canalServerPost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->destination !== null) {
      $xfer += $output->writeFieldBegin('destination', TType::STRING, 9);
      $xfer += $output->writeString($this->destination);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canalUser !== null) {
      $xfer += $output->writeFieldBegin('canalUser', TType::STRING, 10);
      $xfer += $output->writeString($this->canalUser);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canalPasswd !== null) {
      $xfer += $output->writeFieldBegin('canalPasswd', TType::STRING, 11);
      $xfer += $output->writeString($this->canalPasswd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mysqlip !== null) {
      $xfer += $output->writeFieldBegin('mysqlip', TType::STRING, 12);
      $xfer += $output->writeString($this->mysqlip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mysqlDatabase !== null) {
      $xfer += $output->writeFieldBegin('mysqlDatabase', TType::STRING, 13);
      $xfer += $output->writeString($this->mysqlDatabase);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->canalServerName !== null) {
      $xfer += $output->writeFieldBegin('canalServerName', TType::STRING, 14);
      $xfer += $output->writeString($this->canalServerName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::STRING, 15);
      $xfer += $output->writeString($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->stateMessage !== null) {
      $xfer += $output->writeFieldBegin('stateMessage', TType::STRING, 16);
      $xfer += $output->writeString($this->stateMessage);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class returnMessage {
  static $_TSPEC;

  public $code = null;
  public $message = null;
  public $other = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'other',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['other'])) {
        $this->other = $vals['other'];
      }
    }
  }

  public function getName() {
    return 'returnMessage';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->other);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('returnMessage');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->other !== null) {
      $xfer += $output->writeFieldBegin('other', TType::STRING, 3);
      $xfer += $output->writeString($this->other);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class syncserver_ThriftIOException extends TException {
  static $_TSPEC;

  public $message = null;
  public $code = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::I16,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
    }
  }

  public function getName() {
    return 'syncserver_ThriftIOException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I16) {
            $xfer += $input->readI16($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('syncserver_ThriftIOException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I16, 2);
      $xfer += $output->writeI16($this->code);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
