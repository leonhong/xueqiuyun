<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class Servers {
  static $_TSPEC;

  public $ServerName = null;
  public $Port = null;
  public $StartTime = null;
  public $States = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'ServerName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'Port',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'StartTime',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'States',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['ServerName'])) {
        $this->ServerName = $vals['ServerName'];
      }
      if (isset($vals['Port'])) {
        $this->Port = $vals['Port'];
      }
      if (isset($vals['StartTime'])) {
        $this->StartTime = $vals['StartTime'];
      }
      if (isset($vals['States'])) {
        $this->States = $vals['States'];
      }
    }
  }

  public function getName() {
    return 'Servers';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ServerName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Port);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->States);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Servers');
    if ($this->ServerName !== null) {
      $xfer += $output->writeFieldBegin('ServerName', TType::STRING, 1);
      $xfer += $output->writeString($this->ServerName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Port !== null) {
      $xfer += $output->writeFieldBegin('Port', TType::I32, 2);
      $xfer += $output->writeI32($this->Port);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StartTime !== null) {
      $xfer += $output->writeFieldBegin('StartTime', TType::STRING, 3);
      $xfer += $output->writeString($this->StartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->States !== null) {
      $xfer += $output->writeFieldBegin('States', TType::STRING, 4);
      $xfer += $output->writeString($this->States);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RegionLoad {
  static $_TSPEC;

  public $Region = null;
  public $name = null;
  public $Stores = null;
  public $Storesfiles = null;
  public $StorefileSize = null;
  public $StorefileIndex = null;
  public $menstoreSize = null;
  public $Requests = null;
  public $ReadRequests = null;
  public $WriteReqests = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Region',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'Stores',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'Storesfiles',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'StorefileSize',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'StorefileIndex',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'menstoreSize',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'Requests',
          'type' => TType::I64,
          ),
        9 => array(
          'var' => 'ReadRequests',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'WriteReqests',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Region'])) {
        $this->Region = $vals['Region'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['Stores'])) {
        $this->Stores = $vals['Stores'];
      }
      if (isset($vals['Storesfiles'])) {
        $this->Storesfiles = $vals['Storesfiles'];
      }
      if (isset($vals['StorefileSize'])) {
        $this->StorefileSize = $vals['StorefileSize'];
      }
      if (isset($vals['StorefileIndex'])) {
        $this->StorefileIndex = $vals['StorefileIndex'];
      }
      if (isset($vals['menstoreSize'])) {
        $this->menstoreSize = $vals['menstoreSize'];
      }
      if (isset($vals['Requests'])) {
        $this->Requests = $vals['Requests'];
      }
      if (isset($vals['ReadRequests'])) {
        $this->ReadRequests = $vals['ReadRequests'];
      }
      if (isset($vals['WriteReqests'])) {
        $this->WriteReqests = $vals['WriteReqests'];
      }
    }
  }

  public function getName() {
    return 'RegionLoad';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Region);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Stores);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Storesfiles);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->StorefileSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->StorefileIndex);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->menstoreSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->Requests);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->ReadRequests);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->WriteReqests);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RegionLoad');
    if ($this->Region !== null) {
      $xfer += $output->writeFieldBegin('Region', TType::STRING, 1);
      $xfer += $output->writeString($this->Region);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Stores !== null) {
      $xfer += $output->writeFieldBegin('Stores', TType::I32, 3);
      $xfer += $output->writeI32($this->Stores);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Storesfiles !== null) {
      $xfer += $output->writeFieldBegin('Storesfiles', TType::I32, 4);
      $xfer += $output->writeI32($this->Storesfiles);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StorefileSize !== null) {
      $xfer += $output->writeFieldBegin('StorefileSize', TType::I32, 5);
      $xfer += $output->writeI32($this->StorefileSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StorefileIndex !== null) {
      $xfer += $output->writeFieldBegin('StorefileIndex', TType::I32, 6);
      $xfer += $output->writeI32($this->StorefileIndex);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->menstoreSize !== null) {
      $xfer += $output->writeFieldBegin('menstoreSize', TType::I32, 7);
      $xfer += $output->writeI32($this->menstoreSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Requests !== null) {
      $xfer += $output->writeFieldBegin('Requests', TType::I64, 8);
      $xfer += $output->writeI64($this->Requests);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ReadRequests !== null) {
      $xfer += $output->writeFieldBegin('ReadRequests', TType::I64, 9);
      $xfer += $output->writeI64($this->ReadRequests);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->WriteReqests !== null) {
      $xfer += $output->writeFieldBegin('WriteReqests', TType::I64, 10);
      $xfer += $output->writeI64($this->WriteReqests);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ServerLoad {
  static $_TSPEC;

  public $Load = null;
  public $MaxHeap = null;
  public $MemstoreSize = null;
  public $regions = null;
  public $Requests = null;
  public $Storefiles = null;
  public $StorefileSize = null;
  public $UsedHeap = null;
  public $regionloadlist = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Load',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'MaxHeap',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'MemstoreSize',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'regions',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'Requests',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'Storefiles',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'StorefileSize',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'UsedHeap',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'regionloadlist',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'RegionLoad',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Load'])) {
        $this->Load = $vals['Load'];
      }
      if (isset($vals['MaxHeap'])) {
        $this->MaxHeap = $vals['MaxHeap'];
      }
      if (isset($vals['MemstoreSize'])) {
        $this->MemstoreSize = $vals['MemstoreSize'];
      }
      if (isset($vals['regions'])) {
        $this->regions = $vals['regions'];
      }
      if (isset($vals['Requests'])) {
        $this->Requests = $vals['Requests'];
      }
      if (isset($vals['Storefiles'])) {
        $this->Storefiles = $vals['Storefiles'];
      }
      if (isset($vals['StorefileSize'])) {
        $this->StorefileSize = $vals['StorefileSize'];
      }
      if (isset($vals['UsedHeap'])) {
        $this->UsedHeap = $vals['UsedHeap'];
      }
      if (isset($vals['regionloadlist'])) {
        $this->regionloadlist = $vals['regionloadlist'];
      }
    }
  }

  public function getName() {
    return 'ServerLoad';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Load);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MaxHeap);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->MemstoreSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->regions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Requests);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Storefiles);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->StorefileSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->UsedHeap);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->regionloadlist = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new RegionLoad();
              $xfer += $elem5->read($input);
              $this->regionloadlist []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ServerLoad');
    if ($this->Load !== null) {
      $xfer += $output->writeFieldBegin('Load', TType::I32, 1);
      $xfer += $output->writeI32($this->Load);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MaxHeap !== null) {
      $xfer += $output->writeFieldBegin('MaxHeap', TType::I32, 2);
      $xfer += $output->writeI32($this->MaxHeap);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->MemstoreSize !== null) {
      $xfer += $output->writeFieldBegin('MemstoreSize', TType::I32, 3);
      $xfer += $output->writeI32($this->MemstoreSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regions !== null) {
      $xfer += $output->writeFieldBegin('regions', TType::I32, 4);
      $xfer += $output->writeI32($this->regions);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Requests !== null) {
      $xfer += $output->writeFieldBegin('Requests', TType::I32, 5);
      $xfer += $output->writeI32($this->Requests);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Storefiles !== null) {
      $xfer += $output->writeFieldBegin('Storefiles', TType::I32, 6);
      $xfer += $output->writeI32($this->Storefiles);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StorefileSize !== null) {
      $xfer += $output->writeFieldBegin('StorefileSize', TType::I32, 7);
      $xfer += $output->writeI32($this->StorefileSize);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->UsedHeap !== null) {
      $xfer += $output->writeFieldBegin('UsedHeap', TType::I32, 8);
      $xfer += $output->writeI32($this->UsedHeap);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->regionloadlist !== null) {
      if (!is_array($this->regionloadlist)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('regionloadlist', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->regionloadlist));
        {
          foreach ($this->regionloadlist as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ServerInfo {
  static $_TSPEC;

  public $Hostname = null;
  public $HostAndPost = null;
  public $RPCPort = null;
  public $StartTime = null;
  public $ServerLoad = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'Hostname',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'HostAndPost',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'RPCPort',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'StartTime',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ServerLoad',
          'type' => TType::STRUCT,
          'class' => 'ServerLoad',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['Hostname'])) {
        $this->Hostname = $vals['Hostname'];
      }
      if (isset($vals['HostAndPost'])) {
        $this->HostAndPost = $vals['HostAndPost'];
      }
      if (isset($vals['RPCPort'])) {
        $this->RPCPort = $vals['RPCPort'];
      }
      if (isset($vals['StartTime'])) {
        $this->StartTime = $vals['StartTime'];
      }
      if (isset($vals['ServerLoad'])) {
        $this->ServerLoad = $vals['ServerLoad'];
      }
    }
  }

  public function getName() {
    return 'ServerInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Hostname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HostAndPost);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->RPCPort);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->StartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->ServerLoad = new ServerLoad();
            $xfer += $this->ServerLoad->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ServerInfo');
    if ($this->Hostname !== null) {
      $xfer += $output->writeFieldBegin('Hostname', TType::STRING, 1);
      $xfer += $output->writeString($this->Hostname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->HostAndPost !== null) {
      $xfer += $output->writeFieldBegin('HostAndPost', TType::STRING, 2);
      $xfer += $output->writeString($this->HostAndPost);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->RPCPort !== null) {
      $xfer += $output->writeFieldBegin('RPCPort', TType::I32, 3);
      $xfer += $output->writeI32($this->RPCPort);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->StartTime !== null) {
      $xfer += $output->writeFieldBegin('StartTime', TType::STRING, 4);
      $xfer += $output->writeString($this->StartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ServerLoad !== null) {
      if (!is_object($this->ServerLoad)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ServerLoad', TType::STRUCT, 5);
      $xfer += $this->ServerLoad->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class clusterstatus {
  static $_TSPEC;

  public $HbaseVersion = null;
  public $Version = null;
  public $LiveServer = null;
  public $ClusterID = null;
  public $ServerNodesList = null;
  public $DeadServer = null;
  public $Regions = null;
  public $Requests = null;
  public $AvgLoad = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'HbaseVersion',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'Version',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'LiveServer',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'ClusterID',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'ServerNodesList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Servers',
            ),
          ),
        6 => array(
          'var' => 'DeadServer',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'Servers',
            ),
          ),
        7 => array(
          'var' => 'Regions',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'Requests',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'AvgLoad',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['HbaseVersion'])) {
        $this->HbaseVersion = $vals['HbaseVersion'];
      }
      if (isset($vals['Version'])) {
        $this->Version = $vals['Version'];
      }
      if (isset($vals['LiveServer'])) {
        $this->LiveServer = $vals['LiveServer'];
      }
      if (isset($vals['ClusterID'])) {
        $this->ClusterID = $vals['ClusterID'];
      }
      if (isset($vals['ServerNodesList'])) {
        $this->ServerNodesList = $vals['ServerNodesList'];
      }
      if (isset($vals['DeadServer'])) {
        $this->DeadServer = $vals['DeadServer'];
      }
      if (isset($vals['Regions'])) {
        $this->Regions = $vals['Regions'];
      }
      if (isset($vals['Requests'])) {
        $this->Requests = $vals['Requests'];
      }
      if (isset($vals['AvgLoad'])) {
        $this->AvgLoad = $vals['AvgLoad'];
      }
    }
  }

  public function getName() {
    return 'clusterstatus';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->HbaseVersion);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Version);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->LiveServer);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->ClusterID);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->ServerNodesList = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $elem12 = new Servers();
              $xfer += $elem12->read($input);
              $this->ServerNodesList []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->DeadServer = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $elem18 = new Servers();
              $xfer += $elem18->read($input);
              $this->DeadServer []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Regions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->Requests);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->AvgLoad);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('clusterstatus');
    if ($this->HbaseVersion !== null) {
      $xfer += $output->writeFieldBegin('HbaseVersion', TType::STRING, 1);
      $xfer += $output->writeString($this->HbaseVersion);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Version !== null) {
      $xfer += $output->writeFieldBegin('Version', TType::STRING, 2);
      $xfer += $output->writeString($this->Version);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->LiveServer !== null) {
      $xfer += $output->writeFieldBegin('LiveServer', TType::I32, 3);
      $xfer += $output->writeI32($this->LiveServer);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ClusterID !== null) {
      $xfer += $output->writeFieldBegin('ClusterID', TType::STRING, 4);
      $xfer += $output->writeString($this->ClusterID);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ServerNodesList !== null) {
      if (!is_array($this->ServerNodesList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('ServerNodesList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->ServerNodesList));
        {
          foreach ($this->ServerNodesList as $iter19)
          {
            $xfer += $iter19->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->DeadServer !== null) {
      if (!is_array($this->DeadServer)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('DeadServer', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRUCT, count($this->DeadServer));
        {
          foreach ($this->DeadServer as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Regions !== null) {
      $xfer += $output->writeFieldBegin('Regions', TType::I32, 7);
      $xfer += $output->writeI32($this->Regions);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Requests !== null) {
      $xfer += $output->writeFieldBegin('Requests', TType::I32, 8);
      $xfer += $output->writeI32($this->Requests);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->AvgLoad !== null) {
      $xfer += $output->writeFieldBegin('AvgLoad', TType::STRING, 9);
      $xfer += $output->writeString($this->AvgLoad);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class tablesInfo {
  static $_TSPEC;

  public $tableName = null;
  public $Namespace = null;
  public $tableDescriptor = null;
  public $tableRegions = null;
  public $tableSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tableName',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'Namespace',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'tableDescriptor',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'tableRegions',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'tableSize',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tableName'])) {
        $this->tableName = $vals['tableName'];
      }
      if (isset($vals['Namespace'])) {
        $this->Namespace = $vals['Namespace'];
      }
      if (isset($vals['tableDescriptor'])) {
        $this->tableDescriptor = $vals['tableDescriptor'];
      }
      if (isset($vals['tableRegions'])) {
        $this->tableRegions = $vals['tableRegions'];
      }
      if (isset($vals['tableSize'])) {
        $this->tableSize = $vals['tableSize'];
      }
    }
  }

  public function getName() {
    return 'tablesInfo';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->Namespace);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableDescriptor);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->tableRegions);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->tableSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('tablesInfo');
    if ($this->tableName !== null) {
      $xfer += $output->writeFieldBegin('tableName', TType::STRING, 1);
      $xfer += $output->writeString($this->tableName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Namespace !== null) {
      $xfer += $output->writeFieldBegin('Namespace', TType::STRING, 2);
      $xfer += $output->writeString($this->Namespace);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tableDescriptor !== null) {
      $xfer += $output->writeFieldBegin('tableDescriptor', TType::STRING, 3);
      $xfer += $output->writeString($this->tableDescriptor);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tableRegions !== null) {
      $xfer += $output->writeFieldBegin('tableRegions', TType::STRING, 4);
      $xfer += $output->writeString($this->tableRegions);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tableSize !== null) {
      $xfer += $output->writeFieldBegin('tableSize', TType::I64, 5);
      $xfer += $output->writeI64($this->tableSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class hbaseserver_ThriftIOException extends TException {
  static $_TSPEC;

  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'hbaseserver_ThriftIOException';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('hbaseserver_ThriftIOException');
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 1);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class hb_result_data {
  static $_TSPEC;

  public $rowkey = null;
  public $colfamily = null;
  public $col = null;
  public $value = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rowkey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'colfamily',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'col',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'timestamp',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rowkey'])) {
        $this->rowkey = $vals['rowkey'];
      }
      if (isset($vals['colfamily'])) {
        $this->colfamily = $vals['colfamily'];
      }
      if (isset($vals['col'])) {
        $this->col = $vals['col'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['timestamp'])) {
        $this->timestamp = $vals['timestamp'];
      }
    }
  }

  public function getName() {
    return 'hb_result_data';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rowkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->colfamily);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->col);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->timestamp);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('hb_result_data');
    if ($this->rowkey !== null) {
      $xfer += $output->writeFieldBegin('rowkey', TType::STRING, 1);
      $xfer += $output->writeString($this->rowkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->colfamily !== null) {
      $xfer += $output->writeFieldBegin('colfamily', TType::STRING, 2);
      $xfer += $output->writeString($this->colfamily);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->col !== null) {
      $xfer += $output->writeFieldBegin('col', TType::STRING, 3);
      $xfer += $output->writeString($this->col);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 4);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->timestamp !== null) {
      $xfer += $output->writeFieldBegin('timestamp', TType::STRING, 5);
      $xfer += $output->writeString($this->timestamp);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class hb_info {
  static $_TSPEC;

  public $rowkey = null;
  public $colfamily = null;
  public $col = null;
  public $value = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rowkey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'colfamily',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'col',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rowkey'])) {
        $this->rowkey = $vals['rowkey'];
      }
      if (isset($vals['colfamily'])) {
        $this->colfamily = $vals['colfamily'];
      }
      if (isset($vals['col'])) {
        $this->col = $vals['col'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
    }
  }

  public function getName() {
    return 'hb_info';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rowkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->colfamily);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->col);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('hb_info');
    if ($this->rowkey !== null) {
      $xfer += $output->writeFieldBegin('rowkey', TType::STRING, 1);
      $xfer += $output->writeString($this->rowkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->colfamily !== null) {
      $xfer += $output->writeFieldBegin('colfamily', TType::STRING, 2);
      $xfer += $output->writeString($this->colfamily);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->col !== null) {
      $xfer += $output->writeFieldBegin('col', TType::STRING, 3);
      $xfer += $output->writeString($this->col);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 4);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class hb_server_message {
  static $_TSPEC;

  public $code = null;
  public $message = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'message',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['message'])) {
        $this->message = $vals['message'];
      }
    }
  }

  public function getName() {
    return 'hb_server_message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->message);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('hb_server_message');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->message !== null) {
      $xfer += $output->writeFieldBegin('message', TType::STRING, 2);
      $xfer += $output->writeString($this->message);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class hb_data_message {
  static $_TSPEC;

  public $code = null;
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'data',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'hb_result_data',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'hb_data_message';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->data = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new hb_result_data();
              $xfer += $elem26->read($input);
              $this->data []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('hb_data_message');
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 1);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_array($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->data));
        {
          foreach ($this->data as $iter27)
          {
            $xfer += $iter27->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
