<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class QueryReq {
  static $_TSPEC;

  public $column = null;
  public $columnOpt = null;
  public $sourceStr = null;
  public $replaceStr = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'column',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columnOpt',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'sourceStr',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'replaceStr',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['column'])) {
        $this->column = $vals['column'];
      }
      if (isset($vals['columnOpt'])) {
        $this->columnOpt = $vals['columnOpt'];
      }
      if (isset($vals['sourceStr'])) {
        $this->sourceStr = $vals['sourceStr'];
      }
      if (isset($vals['replaceStr'])) {
        $this->replaceStr = $vals['replaceStr'];
      }
    }
  }

  public function getName() {
    return 'QueryReq';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->column);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->columnOpt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sourceStr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replaceStr);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('QueryReq');
    if ($this->column !== null) {
      $xfer += $output->writeFieldBegin('column', TType::STRING, 1);
      $xfer += $output->writeString($this->column);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->columnOpt !== null) {
      $xfer += $output->writeFieldBegin('columnOpt', TType::STRING, 2);
      $xfer += $output->writeString($this->columnOpt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sourceStr !== null) {
      $xfer += $output->writeFieldBegin('sourceStr', TType::STRING, 3);
      $xfer += $output->writeString($this->sourceStr);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replaceStr !== null) {
      $xfer += $output->writeFieldBegin('replaceStr', TType::STRING, 4);
      $xfer += $output->writeString($this->replaceStr);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
