<?php
/**
 * Autogenerated by Thrift Compiler (0.7.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


class KillOptions {
  static $_TSPEC;

  public $wait_secs = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wait_secs',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wait_secs'])) {
        $this->wait_secs = $vals['wait_secs'];
      }
    }
  }

  public function getName() {
    return 'KillOptions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wait_secs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('KillOptions');
    if ($this->wait_secs !== null) {
      $xfer += $output->writeFieldBegin('wait_secs', TType::I32, 1);
      $xfer += $output->writeI32($this->wait_secs);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class RebalanceOptions {
  static $_TSPEC;

  public $wait_secs = null;
  public $num_workers = null;
  public $num_executors = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'wait_secs',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'num_workers',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'num_executors',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::I32,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::I32,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['wait_secs'])) {
        $this->wait_secs = $vals['wait_secs'];
      }
      if (isset($vals['num_workers'])) {
        $this->num_workers = $vals['num_workers'];
      }
      if (isset($vals['num_executors'])) {
        $this->num_executors = $vals['num_executors'];
      }
    }
  }

  public function getName() {
    return 'RebalanceOptions';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->wait_secs);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->num_workers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->num_executors = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = 0;
              $xfer += $input->readString($key5);
              $xfer += $input->readI32($val6);
              $this->num_executors[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('RebalanceOptions');
    if ($this->wait_secs !== null) {
      $xfer += $output->writeFieldBegin('wait_secs', TType::I32, 1);
      $xfer += $output->writeI32($this->wait_secs);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_workers !== null) {
      $xfer += $output->writeFieldBegin('num_workers', TType::I32, 2);
      $xfer += $output->writeI32($this->num_workers);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->num_executors !== null) {
      if (!is_array($this->num_executors)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('num_executors', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::I32, count($this->num_executors));
        {
          foreach ($this->num_executors as $kiter7 => $viter8)
          {
            $xfer += $output->writeString($kiter7);
            $xfer += $output->writeI32($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
